# Default values for ades.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}


redis:
  replica:
    replicaCount: 1


zoo:
  kernel:
    maincfgtpl: "files/zoo-kernel/main.cfg.tpl"
    oas: "files/zoo-kernel/oas.cfg"
    htaccess: "files/zoo-kernel/htaccess"
  openapi:
    startupsh: "files/openapi/server/startUp.sh"
  rabbitmq:
    definitions: "files/rabbitmq/definitions.json"



postgresql:
  enabled: true
  primary:
    initdb:
      scriptsConfigMap: "postgresql-primary-init-scripts"

global:
  postgresql:
    auth:
      username: zoo
      password: zoo
      database: zoo

    service:
      ports:
        postgresql: "5432"

# rabbitmq
rabbitmq:
  auth:
    username: RABBITMQ_USERNAME
#    password: RABBITMQ_PASSWORD
#    erlangCookie: RABBITMQ_ERLANG_COOKIE
#  loadDefinition:
#    enable: true
#    existingSecret: load-definition
#  extraConfiguration: |
#    load_definitions = /app/load_definition.json

    password: CHANGEME
  loadDefinition:
    enabled: true
    existingSecret: load-definition
  extraConfiguration: |
    load_definitions = /app/load_definition.json





pgbouncer:
  replicaCount: 1
  verbose: 1
  users:
    dbuser: zoo
  databases:
    postgres:
      host: pg
      port: 5432
      user: zoo
      dbname: zoo
  connectionLimits:
    defaultPoolSize: 100
#    minPoolSize: 20
#    reservePoolSize: 20


#    image: edoburu/pgbouncer:1.8.1
#    environment:
#      DATABASE_URL: "postgres://zoo:zoo@pg/zoo"
#      MAX_CLIENT_CONN: 1000
#      MAX_DB_CONNECTIONS: 100
#      DEFAULT_POOL_SIZE: 100
#      POOL_MODE: transaction
#    ports:
#      - "5432:5432"
#    depends_on:
#      - pg